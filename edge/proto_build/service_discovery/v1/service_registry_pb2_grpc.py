# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from service_discovery.v1 import service_registry_pb2 as service__discovery_dot_v1_dot_service__registry__pb2


class ServiceRegistryStub(object):
    """Service Registry definition
    
    The protobuf definitions for Chariott's service registry

    The entry point for the Registry gRPC Service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/service_registry.ServiceRegistry/Register',
                request_serializer=service__discovery_dot_v1_dot_service__registry__pb2.RegisterRequest.SerializeToString,
                response_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.RegisterResponse.FromString,
                )
        self.Unregister = channel.unary_unary(
                '/service_registry.ServiceRegistry/Unregister',
                request_serializer=service__discovery_dot_v1_dot_service__registry__pb2.UnregisterRequest.SerializeToString,
                response_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.UnregisterResponse.FromString,
                )
        self.Discover = channel.unary_unary(
                '/service_registry.ServiceRegistry/Discover',
                request_serializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverRequest.SerializeToString,
                response_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverResponse.FromString,
                )
        self.DiscoverByNamespace = channel.unary_unary(
                '/service_registry.ServiceRegistry/DiscoverByNamespace',
                request_serializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverByNamespaceRequest.SerializeToString,
                response_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverByNamespaceResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/service_registry.ServiceRegistry/List',
                request_serializer=service__discovery_dot_v1_dot_service__registry__pb2.ListRequest.SerializeToString,
                response_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.ListResponse.FromString,
                )


class ServiceRegistryServicer(object):
    """Service Registry definition
    
    The protobuf definitions for Chariott's service registry

    The entry point for the Registry gRPC Service.
    """

    def Register(self, request, context):
        """Register, or add a service to the registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unregister(self, request, context):
        """Unregister, or remove a service from the registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Discover(self, request, context):
        """Discover, or retrieve the metadata for a single service given its fully qualified name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverByNamespace(self, request, context):
        """Discover a list of services given their namespace
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """List, or retrieve all contents of the service registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceRegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.RegisterRequest.FromString,
                    response_serializer=service__discovery_dot_v1_dot_service__registry__pb2.RegisterResponse.SerializeToString,
            ),
            'Unregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Unregister,
                    request_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.UnregisterRequest.FromString,
                    response_serializer=service__discovery_dot_v1_dot_service__registry__pb2.UnregisterResponse.SerializeToString,
            ),
            'Discover': grpc.unary_unary_rpc_method_handler(
                    servicer.Discover,
                    request_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverRequest.FromString,
                    response_serializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverResponse.SerializeToString,
            ),
            'DiscoverByNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverByNamespace,
                    request_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverByNamespaceRequest.FromString,
                    response_serializer=service__discovery_dot_v1_dot_service__registry__pb2.DiscoverByNamespaceResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=service__discovery_dot_v1_dot_service__registry__pb2.ListRequest.FromString,
                    response_serializer=service__discovery_dot_v1_dot_service__registry__pb2.ListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_registry.ServiceRegistry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServiceRegistry(object):
    """Service Registry definition
    
    The protobuf definitions for Chariott's service registry

    The entry point for the Registry gRPC Service.
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_registry.ServiceRegistry/Register',
            service__discovery_dot_v1_dot_service__registry__pb2.RegisterRequest.SerializeToString,
            service__discovery_dot_v1_dot_service__registry__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_registry.ServiceRegistry/Unregister',
            service__discovery_dot_v1_dot_service__registry__pb2.UnregisterRequest.SerializeToString,
            service__discovery_dot_v1_dot_service__registry__pb2.UnregisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Discover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_registry.ServiceRegistry/Discover',
            service__discovery_dot_v1_dot_service__registry__pb2.DiscoverRequest.SerializeToString,
            service__discovery_dot_v1_dot_service__registry__pb2.DiscoverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverByNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_registry.ServiceRegistry/DiscoverByNamespace',
            service__discovery_dot_v1_dot_service__registry__pb2.DiscoverByNamespaceRequest.SerializeToString,
            service__discovery_dot_v1_dot_service__registry__pb2.DiscoverByNamespaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_registry.ServiceRegistry/List',
            service__discovery_dot_v1_dot_service__registry__pb2.ListRequest.SerializeToString,
            service__discovery_dot_v1_dot_service__registry__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
