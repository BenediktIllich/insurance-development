# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from module.managed_subscribe.v1 import managed_subscribe_pb2 as module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2


class ManagedSubscribeStub(object):
    """The entry point for the Managed Subscribe Module gRPC service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSubscriptionInfo = channel.unary_unary(
                '/managed_subscribe.ManagedSubscribe/GetSubscriptionInfo',
                request_serializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.SubscriptionInfoRequest.SerializeToString,
                response_deserializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.SubscriptionInfoResponse.FromString,
                )


class ManagedSubscribeServicer(object):
    """The entry point for the Managed Subscribe Module gRPC service.
    """

    def GetSubscriptionInfo(self, request, context):
        """Method to get the subscription information needed for a consumer to subscribe to an entity
        id with custom constraints.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagedSubscribeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSubscriptionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubscriptionInfo,
                    request_deserializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.SubscriptionInfoRequest.FromString,
                    response_serializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.SubscriptionInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'managed_subscribe.ManagedSubscribe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagedSubscribe(object):
    """The entry point for the Managed Subscribe Module gRPC service.
    """

    @staticmethod
    def GetSubscriptionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/managed_subscribe.ManagedSubscribe/GetSubscriptionInfo',
            module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.SubscriptionInfoRequest.SerializeToString,
            module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.SubscriptionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ManagedSubscribeCallbackStub(object):
    """The callback service implemented by a provider that is using the Managed Subscribe Module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TopicManagementCB = channel.unary_unary(
                '/managed_subscribe.ManagedSubscribeCallback/TopicManagementCB',
                request_serializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.TopicManagementRequest.SerializeToString,
                response_deserializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.TopicManagementResponse.FromString,
                )


class ManagedSubscribeCallbackServicer(object):
    """The callback service implemented by a provider that is using the Managed Subscribe Module.
    """

    def TopicManagementCB(self, request, context):
        """Callback method used by the Managed Subscribe Module to inform the provider about
        subscription updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagedSubscribeCallbackServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TopicManagementCB': grpc.unary_unary_rpc_method_handler(
                    servicer.TopicManagementCB,
                    request_deserializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.TopicManagementRequest.FromString,
                    response_serializer=module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.TopicManagementResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'managed_subscribe.ManagedSubscribeCallback', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagedSubscribeCallback(object):
    """The callback service implemented by a provider that is using the Managed Subscribe Module.
    """

    @staticmethod
    def TopicManagementCB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/managed_subscribe.ManagedSubscribeCallback/TopicManagementCB',
            module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.TopicManagementRequest.SerializeToString,
            module_dot_managed__subscribe_dot_v1_dot_managed__subscribe__pb2.TopicManagementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
